// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package edu.mit.cci.turksnet;

import edu.mit.cci.turksnet.Session_;
import edu.mit.cci.turksnet.Worker;
import java.lang.Long;
import java.lang.String;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Worker_Roo_Finder {
    
    public static TypedQuery<Worker> Worker.findWorkersByUsernameAndPassword(String username, String password) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        if (password == null || password.length() == 0) throw new IllegalArgumentException("The password argument is required");
        EntityManager em = Worker.entityManager();
        TypedQuery<Worker> q = em.createQuery("SELECT Worker FROM Worker AS worker WHERE worker.username = :username AND worker.password = :password", Worker.class);
        q.setParameter("username", username);
        q.setParameter("password", password);
        return q;
    }
    
    public static TypedQuery<Worker> Worker.findWorkersByLastCheckinGreaterThan(Long lastCheckin) {
        if (lastCheckin == null) throw new IllegalArgumentException("The lastCheckin argument is required");
        EntityManager em = Worker.entityManager();
        TypedQuery<Worker> q = em.createQuery("SELECT Worker FROM Worker AS worker WHERE worker.lastCheckin > :lastCheckin", Worker.class);
        q.setParameter("lastCheckin", lastCheckin);
        return q;
    }
    
    public static TypedQuery<Worker> Worker.findWorkersByUsername(String username) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        EntityManager em = Worker.entityManager();
        TypedQuery<Worker> q = em.createQuery("SELECT Worker FROM Worker AS worker WHERE worker.username = :username", Worker.class);
        q.setParameter("username", username);
        return q;
    }
    
    public static TypedQuery<Worker> Worker.findWorkersByLastCheckinGreaterThanEqualsAndCurrentAssignment(Long lastCheckin, Session_ currentAssignment) {
        if (lastCheckin == null) throw new IllegalArgumentException("The lastCheckin argument is required");
        if (currentAssignment == null) throw new IllegalArgumentException("The currentAssignment argument is required");
        EntityManager em = Worker.entityManager();
        TypedQuery<Worker> q = em.createQuery("SELECT Worker FROM Worker AS worker WHERE worker.lastCheckin >= :lastCheckin  AND worker.currentAssignment = :currentAssignment", Worker.class);
        q.setParameter("lastCheckin", lastCheckin);
        q.setParameter("currentAssignment", currentAssignment);
        return q;
    }

    public static TypedQuery<Worker> Worker.findWorkersByLastCheckinGreaterThanEqualsAndCurrentAssignmentIsNull(Long lastCheckin) {
        if (lastCheckin == null) throw new IllegalArgumentException("The lastCheckin argument is required");

        EntityManager em = Worker.entityManager();
        TypedQuery<Worker> q = em.createQuery("SELECT Worker FROM Worker AS worker WHERE worker.lastCheckin >= :lastCheckin  AND worker.currentAssignment is NULL", Worker.class);
        q.setParameter("lastCheckin", lastCheckin);

        return q;
    }
    
}
