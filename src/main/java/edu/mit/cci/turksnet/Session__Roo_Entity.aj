// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package edu.mit.cci.turksnet;

import edu.mit.cci.turksnet.Session_;
import java.lang.Integer;
import java.lang.Long;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Version;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Session__Roo_Entity {
    
    declare @type: Session_: @Entity;
    
    @PersistenceContext
    transient EntityManager Session_.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id")
    private Long Session_.id;
    
    @Version
    @Column(name = "version")
    private Integer Session_.version;
    
    public Long Session_.getId() {
        return this.id;
    }
    
    public void Session_.setId(Long id) {
        this.id = id;
    }
    
    public Integer Session_.getVersion() {
        return this.version;
    }
    
    public void Session_.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional
    public void Session_.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Session_.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Session_ attached = Session_.findSession_(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Session_.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public Session_ Session_.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Session_ merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager Session_.entityManager() {
        EntityManager em = new Session_().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Session_.countSession_s() {
        return entityManager().createQuery("select count(o) from Session_ o", Long.class).getSingleResult();
    }
    
    public static List<Session_> Session_.findAllSession_s() {
        return entityManager().createQuery("select o from Session_ o", Session_.class).getResultList();
    }
    
    public static Session_ Session_.findSession_(Long id) {
        if (id == null) return null;
        return entityManager().find(Session_.class, id);
    }
    
    public static List<Session_> Session_.findSession_Entries(int firstResult, int maxResults) {
        return entityManager().createQuery("select o from Session_ o", Session_.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
